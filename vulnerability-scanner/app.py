import nmap
import psycopg2
import json
import os
import time


# Load configuration
config_path = os.getenv("CONFIG_PATH", "./config.json")
with open(config_path, "r") as f:
    config = json.load(f)

db_config = config["database"]
DB_HOST = db_config["host"]
DB_PORT = db_config["port"]
DB_NAME = db_config["name"]
DB_USER = db_config["users"]["scanner"]["user"]
DB_PASSWORD = db_config["users"]["scanner"]["password"]

subnets = config["scanning"]["subnets"]

# Initialize Nmap scanner
scanner = nmap.PortScanner()


def log_to_db(ip, system, vulnerabilities):
    """Log scan results to the database."""
    try:
        conn = psycopg2.connect(
            host=DB_HOST,
            port=DB_PORT,
            database=DB_NAME,
            user=DB_USER,
            password=DB_PASSWORD,
        )
        cur = conn.cursor()
        cur.execute(
            """
            INSERT INTO scan_results (ip, system, vulnerabilities, scanned_at)
            VALUES (%s, %s, %s, CURRENT_TIMESTAMP)
            """,
            (ip, system, json.dumps(vulnerabilities)),
        )
        conn.commit()
        cur.close()
        conn.close()
        print(f"Logged: {ip} -> {len(vulnerabilities)} vulnerabilities")
    except Exception as e:
        print(f"Failed to log to DB: {e}")


def scan_network():
    """Scan the configured subnets for vulnerabilities."""
    for subnet in subnets:
        print(f"Scanning subnet: {subnet}")
        scanner.scan(hosts=subnet, arguments="--script vuln -sV")  # Use Nmap vuln script

        for host in scanner.all_hosts():
            if scanner[host].state() == "up":
                system = scanner[host].get("osmatch", [{"name": "Unknown"}])[0]["name"]
                vulnerabilities = []

                # Collect vulnerabilities from the Nmap scan results
                for proto in scanner[host].all_protocols():
                    for port in scanner[host][proto]:
                        if "script" in scanner[host][proto][port]:
                            for script, output in scanner[host][proto][port]["script"].items():
                                vulnerabilities.append(f"{script}: {output}")

                log_to_db(host, system, vulnerabilities)


if __name__ == "__main__":
    while True:
        scan_network()
        time.sleep(3600)  # Run scans every hour
